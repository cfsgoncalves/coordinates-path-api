// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: orders.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
  order_code, weight, latitude, longitude, description
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING order_code, weight, latitude, longitude, description
`

type CreateOrderParams struct {
	OrderCode   string      `binding:"required" db:"order_code" json:"order_code"`
	Weight      float64     `binding:"required" db:"weight" json:"weight"`
	Latitude    float64     `binding:"required" db:"latitude" json:"latitude"`
	Longitude   float64     `binding:"required" db:"longitude" json:"longitude"`
	Description pgtype.Text `db:"description" json:"description"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.OrderCode,
		arg.Weight,
		arg.Latitude,
		arg.Longitude,
		arg.Description,
	)
	var i Order
	err := row.Scan(
		&i.OrderCode,
		&i.Weight,
		&i.Latitude,
		&i.Longitude,
		&i.Description,
	)
	return i, err
}

const getOrdersWeightByOrderIds = `-- name: GetOrdersWeightByOrderIds :one
SELECT SUM(orders.weight) as total_weight FROM orders 
WHERE order_code = ANY($1::text[])
`

func (q *Queries) GetOrdersWeightByOrderIds(ctx context.Context, dollar_1 []string) (int64, error) {
	row := q.db.QueryRow(ctx, getOrdersWeightByOrderIds, dollar_1)
	var total_weight int64
	err := row.Scan(&total_weight)
	return total_weight, err
}

const listOrders = `-- name: ListOrders :many
SELECT order_code, weight, latitude, longitude, description FROM orders
WHERE order_code = $1
ORDER BY order_code
`

func (q *Queries) ListOrders(ctx context.Context, orderCode string) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrders, orderCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.OrderCode,
			&i.Weight,
			&i.Latitude,
			&i.Longitude,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrdersToBeAssigned = `-- name: ListOrdersToBeAssigned :many
SELECT order_code, weight, latitude, longitude, description FROM orders
WHERE NOT exists
(
SELECT order_code FROM order_trucks ot
WHERE order_code  = orders.order_code
and ot.order_status = 'waiting' and Date(ot.date) >= NOW()::timestamp::date
)
`

func (q *Queries) ListOrdersToBeAssigned(ctx context.Context) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrdersToBeAssigned)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.OrderCode,
			&i.Weight,
			&i.Latitude,
			&i.Longitude,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
