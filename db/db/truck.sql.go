// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: truck.sql

package db

import (
	"context"
)

const createTruck = `-- name: CreateTruck :one
INSERT INTO trucks (
  plate, max_weight
) VALUES (
  $1, $2
)
RETURNING plate, max_weight
`

type CreateTruckParams struct {
	Plate     string  `binding:"required" db:"plate" json:"plate"`
	MaxWeight float64 `binding:"required" db:"max_weight" json:"max_weight"`
}

func (q *Queries) CreateTruck(ctx context.Context, arg CreateTruckParams) (Truck, error) {
	row := q.db.QueryRow(ctx, createTruck, arg.Plate, arg.MaxWeight)
	var i Truck
	err := row.Scan(&i.Plate, &i.MaxWeight)
	return i, err
}

const getTruckByPlate = `-- name: GetTruckByPlate :one
SELECT plate, max_weight FROM trucks
WHERE plate = $1
`

func (q *Queries) GetTruckByPlate(ctx context.Context, plate string) (Truck, error) {
	row := q.db.QueryRow(ctx, getTruckByPlate, plate)
	var i Truck
	err := row.Scan(&i.Plate, &i.MaxWeight)
	return i, err
}

const getTruckCapacityByPlateAndDate = `-- name: GetTruckCapacityByPlateAndDate :one
select plate, max_weight, COALESCE(SUM(weight::float)::float,max_weight::float)::float as capacity from orders, order_trucks, trucks
where orders.order_code = order_trucks.order_code AND trucks.plate = order_trucks.truck_plate
and trucks.plate=$1 and date=$2 and order_trucks.order_status != 'delivered' group by trucks.max_weight, plate
`

type GetTruckCapacityByPlateAndDateParams struct {
	Plate string `binding:"required" db:"plate" json:"plate"`
	Date  string `binding:"required" db:"date" json:"date"`
}

type GetTruckCapacityByPlateAndDateRow struct {
	Plate     string  `binding:"required" db:"plate" json:"plate"`
	MaxWeight float64 `binding:"required" db:"max_weight" json:"max_weight"`
	Capacity  float64 `db:"capacity" json:"capacity"`
}

func (q *Queries) GetTruckCapacityByPlateAndDate(ctx context.Context, arg GetTruckCapacityByPlateAndDateParams) (GetTruckCapacityByPlateAndDateRow, error) {
	row := q.db.QueryRow(ctx, getTruckCapacityByPlateAndDate, arg.Plate, arg.Date)
	var i GetTruckCapacityByPlateAndDateRow
	err := row.Scan(&i.Plate, &i.MaxWeight, &i.Capacity)
	return i, err
}
