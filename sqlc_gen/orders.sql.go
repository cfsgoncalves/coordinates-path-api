// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: orders.sql

package sqlcgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
  weight, latitude, longitude, description
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, weight, latitude, longitude, description
`

type CreateOrderParams struct {
	Weight      pgtype.Int4
	Latitude    pgtype.Float8
	Longitude   pgtype.Float8
	Description pgtype.Text
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.Weight,
		arg.Latitude,
		arg.Longitude,
		arg.Description,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Weight,
		&i.Latitude,
		&i.Longitude,
		&i.Description,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, weight, latitude, longitude, description FROM orders
WHERE id = $1
ORDER BY id
`

func (q *Queries) ListOrders(ctx context.Context, id int64) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrders, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.Weight,
			&i.Latitude,
			&i.Longitude,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
